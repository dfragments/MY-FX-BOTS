//+------------------------------------------------------------------+
//| Forex Trading Bot: Buy Stop & Sell Stop at Pip Intervals (MQL4) |
//+------------------------------------------------------------------+
#property strict

extern double LotSize = 0.1;       // User-defined lot size
extern int OrderCount = 4;         // Number of Buy Stop/Sell Stop orders
extern int PipInterval = 1000;     // Interval in pips between orders
extern double BuyTriggerLevel = 3100; // Price level to trigger Buy Stop orders
extern double SellTriggerLevel = 3150; // Price level to trigger Sell Stop orders
extern int StopLossPips = 2000;      // Stop loss in pips

bool BuyTriggered = false;
bool SellTriggered = false;

double BuyStopTakeProfit;
double SellStopTakeProfit;

// Function to update chart comment
void UpdateChartMessage(string message) {
   Comment(message);
}

// Function to place Buy Stop orders
void SetBuyStops(double triggerPrice) {
   double price = triggerPrice + PipInterval * Point; // Start at the next Pip Interval
   double stopLoss = price - (StopLossPips * Point);
   double takeProfit = price + (20 * StopLossPips * Point);
   BuyStopTakeProfit = takeProfit;
   
   for (int i = 0; i < OrderCount; i++) {
      int ticket = OrderSend(Symbol(), OP_BUYSTOP, LotSize, price, 3, stopLoss, takeProfit, "Buy Stop Order", 0, 0, Blue);
      string msg;
      if (ticket > 0) {
         msg = "‚úÖ Buy Stop order placed at " + DoubleToString(price, _Digits);
         Print("Buy Stop order placed at ", price); // Colorful output in terminal
         UpdateChartMessage(msg);
      } else {
         msg = "‚ùå Error placing Buy Stop order: " + IntegerToString(GetLastError());
         Print("Error placing Buy Stop order: ", GetLastError()); // Colorful output in terminal
         UpdateChartMessage(msg);
      }
      price += PipInterval * Point;
   }
}

// Function to place Sell Stop orders
void SetSellStops(double triggerPrice) {
   double price = triggerPrice - PipInterval * Point; // Start at the next Pip Interval
   double stopLoss = price + (StopLossPips * Point);
   double takeProfit = price - (20 * StopLossPips * Point);
   SellStopTakeProfit = takeProfit;
   
   for (int i = 0; i < OrderCount; i++) {
      int ticket = OrderSend(Symbol(), OP_SELLSTOP, LotSize, price, 3, stopLoss, takeProfit, "Sell Stop Order", 0, 0, Red);
      string msg;
      if (ticket > 0) {
         msg = "‚úÖ Sell Stop order placed at " + DoubleToString(price, _Digits);
         Print("Sell Stop order placed at ", price); // Colorful output in terminal
         UpdateChartMessage(msg);
      } else {
         msg = "‚ùå Error placing Sell Stop order: " + IntegerToString(GetLastError());
         Print("Error placing Sell Stop order: ", GetLastError()); // Colorful output in terminal
         UpdateChartMessage(msg);
      }
      price -= PipInterval * Point;
   }
}

// Check if Buy Trigger Level is reached
void CheckBuyTrigger() {
   if (Bid >= BuyTriggerLevel && !BuyTriggered) {
      string msg = "üî• Buy Trigger Activated at " + DoubleToString(BuyTriggerLevel, _Digits);
      Print("üî• Buy Trigger Activated at ", BuyTriggerLevel); // Colorful output in terminal
      UpdateChartMessage(msg);
      SetBuyStops(BuyTriggerLevel);
      BuyTriggered = true;
   }
}

// Check if Sell Trigger Level is reached
void CheckSellTrigger() {
   if (Ask <= SellTriggerLevel && !SellTriggered) {
      string msg = "üî• Sell Trigger Activated at " + DoubleToString(SellTriggerLevel, _Digits);
      Print("üî• Sell Trigger Activated at ", SellTriggerLevel); // Colorful output in terminal
      UpdateChartMessage(msg);
      SetSellStops(SellTriggerLevel);
      SellTriggered = true;
   }
}

//+------------------------------------------------------------------+
//| Expert initialization function                                  |
//+------------------------------------------------------------------+
int init() {
   string msg = "Bot Initialized: Monitoring price levels...";
   Print(msg);
   UpdateChartMessage(msg);
   return 0;
}

//+------------------------------------------------------------------+
//| Expert tick function                                            |
//+------------------------------------------------------------------+
void start() {
   CheckBuyTrigger();
   CheckSellTrigger();
}
